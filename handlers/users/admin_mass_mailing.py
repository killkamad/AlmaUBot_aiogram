import logging
import asyncio
from aiogram.utils import exceptions
from aiogram import types
from aiogram.types import CallbackQuery, ContentType
from aiogram.dispatcher import FSMContext

from .admin_menu import admin_menu
from loader import dp, bot
from utils.delete_messages import bot_delete_messages

# –ò–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from keyboards.inline import inline_keyboard_mass_mailing_send_or_attach, inline_keyboard_cancel_or_send

# –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –ë–î –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
from utils import db_api as db

# –ò–º–ø–æ—Ä—Ç —Å—Ç–µ–π—Ç–æ–≤
from states.admin import MassMailSending

from utils.misc import rate_limit


@dp.callback_query_handler(text='send_all', state=None)
async def callback_inline_send_all(call: CallbackQuery):
    logging.info(f'User({call.message.chat.id}) –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É üì£ –†–∞—Å—Å—ã–ª–∫–∞ - {call.data}')
    await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:')
    await MassMailSending.message_text.set()


@dp.message_handler(content_types=ContentType.ANY, state=MassMailSending.message_text)
async def message_send_text(message: types.Message, state: FSMContext):
    if message.content_type == 'text':
        if len(message.text) <= 4000:
            await state.update_data(message_text_all=message.text)
            message_txt = '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n' + message.text + '\n <i><u>–í–´ –£–í–ï–†–ï–ù–´?</u></i>'
            await bot.send_message(message.chat.id, message_txt,
                                   parse_mode='HTML',
                                   reply_markup=inline_keyboard_mass_mailing_send_or_attach())
            await state.reset_state(with_data=False)
        else:
            await bot.send_message(message.chat.id,
                                   f'–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç <b>{len(message.text)}</b> —Å–∏–º–≤–æ–ª–æ–≤. –ë–æ—Ç –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
                                   parse_mode='HTML')
    else:
        print(message.content_type)
        await bot.send_message(message.chat.id,
                               '–û—à–∏–±–∫–∞ - –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç\n–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:')


@dp.callback_query_handler(text='attach_pic_or_doc')
async def callback_inline_attach_pic_or_doc(call: CallbackQuery):
    logging.info(f'User({call.message.chat.id}) –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç - {call.data}')
    await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)  # –£–±–∏—Ä–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await bot.send_message(call.message.chat.id, '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª –∫ —Ä–∞—Å—Å—ã–ª–∫–µ:')
    await MassMailSending.message_attached.set()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(content_types=ContentType.ANY, state=MassMailSending.message_attached)
async def message_send_photo(message: types.Message, state: FSMContext):
    if message.content_type == 'photo':
        await state.update_data(content_type="photo", file_id=message.photo[-1].file_id)
        # logging.info(message.photo[-1].file_id)
        data = await state.get_data()
        message_txt = '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n' + data['message_text_all'] + '\n <i><u>–í–´ –£–í–ï–†–ï–ù–´?</u></i>'
        await message.reply(message_txt, parse_mode='HTML', reply_markup=inline_keyboard_cancel_or_send())
        await state.reset_state(with_data=False)
    elif message.content_type == 'document':
        await state.update_data(content_type="document", file_id=message.document.file_id)
        # logging.info(message.document.file_id)
        data = await state.get_data()
        message_txt = '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n' + data['message_text_all'] + '\n <i><u>–í–´ –£–í–ï–†–ï–ù–´?</u></i>'
        await message.reply(message_txt, parse_mode='HTML', reply_markup=inline_keyboard_cancel_or_send())
        await state.reset_state(with_data=False)
    elif message.content_type == 'voice':
        await state.update_data(content_type="voice", file_id=message.voice.file_id)
        # logging.info(message.voice.file_id)
        data = await state.get_data()
        message_txt = '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n' + data['message_text_all'] + '\n <i><u>–í–´ –£–í–ï–†–ï–ù–´?</u></i>'
        await message.reply(message_txt, parse_mode='HTML', reply_markup=inline_keyboard_cancel_or_send())
        await state.reset_state(with_data=False)
    else:
        logging.info(f'Message type - {message.content_type}')
        await bot.send_message(message.chat.id,
                               '–û—à–∏–±–∫–∞ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞–∫ "–§–æ—Ç–æ", –Ω–µ –∫–∞–∫ "–§–∞–π–ª"')


@dp.callback_query_handler(text='send_send_to_all')
async def callback_inline_send_send_all(call: CallbackQuery, state: FSMContext):
    logging.info(f'User({call.message.chat.id}) –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "‚úî –û—Ç–ø—Ä–∞–≤–∏—Ç—å" –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º - {call.data}')
    request = 0
    data = await state.get_data()
    if len(data) > 2:
        await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)  # –£–±–∏—Ä–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await bot.send_message(call.message.chat.id,
                               '<b>üîÑ –ù–∞—á–∞–ª–∞—Å—å –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.</b>',
                               parse_mode='HTML')
        await admin_menu(call.message)
        all_users = await db.select_users()
        for user in all_users:
            try:
                if data['content_type'] == "photo":
                    if len(data['message_text_all']) <= 1023:
                        await bot.send_photo(user, data['file_id'], caption=data['message_text_all'])
                    else:
                        await bot.send_message(user, data['message_text_all'], parse_mode='HTML')
                        await bot.send_photo(user, data['file_id'])
                elif data['content_type'] == "document":
                    if len(data['message_text_all']) <= 1023:
                        await bot.send_document(user, data['file_id'], caption=data['message_text_all'])
                    else:
                        await bot.send_message(user, data['message_text_all'], parse_mode='HTML')
                        await bot.send_document(user, data['file_id'])
                elif data['content_type'] == "voice":
                    if len(data['message_text_all']) <= 1023:
                        await bot.send_voice(user, data['file_id'], caption=data['message_text_all'])
                    else:
                        await bot.send_message(user, data['message_text_all'], parse_mode='HTML')
                        await bot.send_voice(user, data['file_id'])
                request += 1
                await asyncio.sleep(0.5)
                if request % 30 == 0:
                    await asyncio.sleep(2)
                    request = 0
            except Exception as e:
                pass
                # logging.info(f'–ù–∞–≤–µ—Ä–Ω–æ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω {e}')
        await bot.send_message(call.message.chat.id,
                               '<b>‚úÖ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.</b>',
                               parse_mode='HTML')
        await state.reset_state()
    else:
        await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)  # –£–±–∏—Ä–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await bot.send_message(call.message.chat.id,
                               '<b>üîÑ –ù–∞—á–∞–ª–∞—Å—å –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.</b>',
                               parse_mode='HTML')
        await admin_menu(call.message)
        all_users = await db.select_users()
        for user in all_users:
            try:
                await bot.send_message(user, data['message_text_all'], parse_mode='HTML')
                request += 1
                await asyncio.sleep(0.5)
                if request % 30 == 0:
                    await asyncio.sleep(2)
                    request = 0
            except Exception as e:
                # logging.info(f'–ù–∞–≤–µ—Ä–Ω–æ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - {e}')
                pass
        await bot.send_message(call.message.chat.id,
                               '<b>‚úÖ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.</b>',
                               parse_mode='HTML')
        await state.reset_state()


@dp.callback_query_handler(text='cancel_massive_sending')
async def callback_inline_cancel(call: CallbackQuery, state: FSMContext):
    logging.info(f'User({call.message.chat.id}) –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É ‚ùå –û—Ç–º–µ–Ω–∞ - {call.data}')
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text='‚úÖ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞')
    await admin_menu(call.message)
    await state.reset_state()
