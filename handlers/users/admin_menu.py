import ast
import logging

from aiogram.utils import exceptions
from aiogram import types
from aiogram.types import CallbackQuery, ContentType
from loader import dp, bot
from keyboards.inline.admin_buttons import inline_keyboard_admin, inline_keyboard_massive_send_all, \
    inline_keyboard_cancel_or_send, inline_keyboard_cancel, cancel_or_send_schedule, inline_keyboard_update_schedule, \
    cancel_or_update_schedule, inline_keyboard_delete_schedule, cancel_or_delete_schedule, \
    cancel_or_send_academic_calendar, cancel_academic_calendar
import asyncio
# –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –ë–î –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
from utils import db_api as db
from utils.almaushop_parser import AlmauShop

from utils.delete_messages import bot_delete_messages
from aiogram.dispatcher import FSMContext
from states.admin import SendAll, SendScheduleToBot, UpdateSchedule, DeleteSchedule, SendAcademCalendar

from utils.misc import rate_limit


@rate_limit(5, 'admin')
@dp.message_handler(commands=['admin'])
async def admin_menu(message):
    try:
        if await db.check_role(message.chat.id, 'admin') == 'admin':
            logging.info(f'User({message.chat.id}) –≤–æ—à–µ–ª –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é')
            users = await db.count_users()
            await bot.send_message(message.chat.id, f'–ú–µ–Ω—é –ê–¥–º–∏–Ω–∞:\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π = {users}\n',
                                   reply_markup=inline_keyboard_admin())
        else:
            await bot.send_message(message.chat.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞')
            logging.info(f'User({message.chat.id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é')
    except Exception as e:
        logging.info(f'–û—à–∏–±–∫–∞ - {e}')


@dp.callback_query_handler(text='send_all', state=None)
async def callback_inline_send_all(call: CallbackQuery):
    logging.info(f'User({call.message.chat.id}) –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É üì£ –†–∞—Å—Å—ã–ª–∫–∞')
    await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:')
    await SendAll.message_text.set()


@dp.callback_query_handler(text='add_photo_mass')
async def callback_inline_add_photo_mass(call: CallbackQuery):
    logging.info(f'User({call.message.chat.id}) –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç')
    await bot.send_message(call.message.chat.id, '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é')
    await SendAll.message_photo.set()


@dp.callback_query_handler(text='cancel')
async def callback_inline_cancel(call: CallbackQuery, state: FSMContext):
    logging.info(f'User({call.message.chat.id}) –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É ‚ùå –û—Ç–º–µ–Ω–∞')
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text='–û–¢–ú–ï–ù–ï–ù–û')
    await bot_delete_messages(call.message, 3)
    await state.reset_state()


@dp.message_handler(content_types=ContentType.ANY, state=SendAll.message_text)
async def message_send_text(message: types.Message, state: FSMContext):
    if message.content_type == 'text':
        if len(message.text) <= 990:
            await state.update_data(message_text_all=message.text)
            message_txt = '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n' + message.text + '\n (*–í–´ –£–í–ï–†–ï–ù–´?*)'
            await bot.send_message(message.chat.id, message_txt, reply_markup=inline_keyboard_massive_send_all())
            await state.reset_state(with_data=False)
        else:
            await bot.send_message(message.chat.id,
                                   f'–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ = <b>{len(message.text)}</b>. –ë–æ—Ç –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
                                   parse_mode='HTML')
    else:
        print(message.content_type)
        await bot.send_message(message.chat.id,
                               '–û—à–∏–±–∫–∞ - –≤–∞—â–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç\n–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:')


@dp.callback_query_handler(text='send_send_to_all')
async def callback_inline_send_send_all(call: CallbackQuery, state: FSMContext):
    logging.info(f'User({call.message.chat.id}) –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "‚úî –û—Ç–ø—Ä–∞–≤–∏—Ç—å" –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
    request = 0
    data = await state.get_data()
    if len(data) == 2:
        await bot_delete_messages(call.message, 5)
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.send_message(call.message.chat.id, '<b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:</b>', parse_mode='HTML')
        users = await db.select_users()
        for i in users:
            try:
                try:
                    await bot.send_photo(i, data['photo_id'], caption=data['message_text_all'])
                    # await bot.send_document(i, data['document_id'])
                    # await bot.send_message(i, data['message_text_all'])
                except Exception as e:
                    await bot.send_document(i, data['document_id'], caption=data['message_text_all'])
                    logging.info(e)
                request += 1
                await asyncio.sleep(0.5)
                if request % 30 == 0:
                    await asyncio.sleep(2)
                    request = 0
            except Exception as e:
                logging.info(f'–ù–∞–≤–µ—Ä–Ω–æ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω {e}')

        await state.reset_state()
    else:
        await bot_delete_messages(call.message, 2)
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.send_message(call.message.chat.id, '<b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:</b>', parse_mode='HTML')
        users = await db.select_users()
        for i in users:
            try:
                await bot.send_message(i, data['message_text_all'])
                request += 1
                await asyncio.sleep(0.5)
                if request % 30 == 0:
                    await asyncio.sleep(2)
                    request = 0
            except Exception as e:
                logging.info(f'–ù–∞–≤–µ—Ä–Ω–æ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - {e}')
        await state.reset_state()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(content_types=ContentType.ANY, state=SendAll.message_photo)
async def message_send_photo(message: types.Message, state: FSMContext):
    if message.content_type == 'photo':
        await state.update_data(photo_id=message.photo[-1].file_id)
        logging.info(message.photo[-1].file_id)
        data = await state.get_data()
        message_txt = '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n' + data['message_text_all'] + '\n (*–í–´ –£–í–ï–†–ï–ù–´?*)'
        await bot.send_message(message.chat.id, message_txt, reply_markup=inline_keyboard_cancel_or_send())
        await state.reset_state(with_data=False)
    elif message.content_type == 'document':
        await state.update_data(document_id=message.document.file_id)
        logging.info(message.document.file_id)
        data = await state.get_data()
        message_txt = '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n' + data['message_text_all'] + '\n (*–í–´ –£–í–ï–†–ï–ù–´?*)'
        await bot.send_message(message.chat.id, message_txt, reply_markup=inline_keyboard_cancel_or_send())
        await state.reset_state(with_data=False)
    else:
        print(message.content_type)
        await bot.send_message(message.chat.id,
                               '–û—à–∏–±–∫–∞ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞–∫ "–§–æ—Ç–æ", –Ω–µ –∫–∞–∫ "–§–∞–π–ª"')


#### –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ####
@dp.callback_query_handler(text='send_schedule_bot', state=None)
async def callback_inline_send_schedule_bot(call: CallbackQuery):
    logging.info(f'User({call.message.chat.id}) –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É {call.data}')
    await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä (3 –ö—É—Ä—Å):', reply_markup=inline_keyboard_cancel())
    await SendScheduleToBot.button_name.set()


#### –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ####
@dp.callback_query_handler(text='update_schedule_bot', state=None)
async def callback_inline_update_schedule_bot(call: CallbackQuery):
    logging.info(f'User({call.message.chat.id}) –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É {call.data}')
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:',
                                reply_markup=await inline_keyboard_update_schedule())
    await UpdateSchedule.button_name.set()


#### –û–¢–ú–ï–ù–ê –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.callback_query_handler(text='cancel_update_step', state=UpdateSchedule.button_name)
async def callback_inline_cancel_update_schedule_bot(call: CallbackQuery, state: FSMContext):
    logging.info(f'User({call.message.chat.id}) –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É {call.data}')
    users = await db.count_users()
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f'–ú–µ–Ω—é –ê–¥–º–∏–Ω–∞:\n- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π = {users}\n'
                                     f'- –†–∞—Å—Å—ã–ª–∫–∞ - –†–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n'
                                     f'- –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç—É',
                                reply_markup=inline_keyboard_admin())
    await state.reset_state()


@dp.callback_query_handler(text_contains="['upd_sch'", state=UpdateSchedule.button_name)
async def callback_inline_update_schedule(call: CallbackQuery, state: FSMContext):
    logging.info(f'User({call.message.chat.id}) –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É {call.data}')
    schedule_button_name = ast.literal_eval(call.data)[1]
    await state.update_data(button_name=schedule_button_name, user_id=call.message.chat.id)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –∫–Ω–æ–ø–∫–∏ <b>{schedule_button_name}</b>:',
                                parse_mode='HTML')
    await UpdateSchedule.send_file.set()


@dp.message_handler(content_types=ContentType.ANY, state=UpdateSchedule.send_file)
async def change_schedule_id(message: types.Message, state: FSMContext):
    # data = await state.get_data()
    # logging.info(data)
    await UpdateSchedule.send_file.set()
    if message.content_type == 'document':
        await state.update_data(file_id=message.document.file_id)
        data = await state.get_data()
        txt = f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏: <b>{data["button_name"]}</b>'
        await bot.send_document(message.chat.id, data["file_id"], caption=txt,
                                reply_markup=cancel_or_update_schedule())
        await state.reset_state(with_data=False)
    else:
        await bot.send_message(message.chat.id,
                               '–û—à–∏–±–∫–∞ - –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º',
                               reply_markup=inline_keyboard_cancel())


#### –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ####
@dp.callback_query_handler(text='delete_schedule_bot', state=None)
async def callback_inline_send_schedule_bot(call: CallbackQuery):
    logging.info(f'User({call.message.chat.id}) –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É {call.data}')
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏–µ:',
                                reply_markup=await inline_keyboard_delete_schedule())
    await DeleteSchedule.button_name.set()


#### –û–¢–ú–ï–ù–ê –£–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.callback_query_handler(text='cancel_delete_step', state=DeleteSchedule.button_name)
async def callback_inline_cancel_update_schedule_bot(call: CallbackQuery, state: FSMContext):
    logging.info(f'User({call.message.chat.id}) –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É {call.data}')
    users = await db.count_users()
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f'–ú–µ–Ω—é –ê–¥–º–∏–Ω–∞:\n- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π = {users}\n'
                                     f'- –†–∞—Å—Å—ã–ª–∫–∞ - –†–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n'
                                     f'- –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç—É',
                                reply_markup=inline_keyboard_admin())
    await state.reset_state()


@dp.callback_query_handler(text_contains="['del_sch'", state=DeleteSchedule.button_name)
async def callback_inline_update_schedule(call: CallbackQuery, state: FSMContext):
    logging.info(f'User({call.message.chat.id}) –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É {call.data}')
    schedule_button_name = ast.literal_eval(call.data)[1]
    await state.update_data(button_name=schedule_button_name, user_id=call.message.chat.id)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f'–í—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è <b>{schedule_button_name}</b>:',
                                parse_mode='HTML', reply_markup=cancel_or_delete_schedule())
    await DeleteSchedule.confirm_delete.set()


@dp.callback_query_handler(text='cancel_step', state=['*'])
async def callback_inline_cancel_step(call: CallbackQuery, state: FSMContext):
    logging.info(f'User({call.message.chat.id}) –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É {call.data}')
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text='<b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>', parse_mode='HTML')
    await state.reset_state()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∞–π–¥–∏ –≤ state
@dp.message_handler(content_types=ContentType.ANY, state=SendScheduleToBot.button_name)
async def message_send_button_name(message: types.Message, state: FSMContext):
    if message.content_type == 'text':
        await state.update_data(button_name=message.text.lower(),
                                user_id=message.chat.id)
        await bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º', reply_markup=inline_keyboard_cancel())
        await SendScheduleToBot.send_file.set()
    else:
        print(message.content_type)
        await bot.send_message(message.chat.id,
                               '–û—à–∏–±–∫–∞ - –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä (3 –ö—É—Ä—Å):')


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–π–¥–∏ —Ñ–∞–π–ª–∞ –≤ state
@dp.message_handler(content_types=ContentType.ANY, state=SendScheduleToBot.send_file)
async def message_schedule_send_file(message: types.Message, state: FSMContext):
    if message.content_type == 'document':
        await state.update_data(file_id=message.document.file_id)
        data = await state.get_data()
        txt = f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –±—É–¥–µ—Ç: {data["button_name"]}'
        await bot.send_document(message.chat.id, data["file_id"], caption=txt,
                                reply_markup=cancel_or_send_schedule())
        await state.reset_state(with_data=False)
    else:
        await message.answer('–û—à–∏–±–∫–∞ - –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º')


# –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@dp.callback_query_handler(text='send_schedule', state=None)
async def callback_inline_send_schedule(call: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        await bot_delete_messages(call.message, 4)
        await db.add_schedule_data(data['user_id'], data['file_id'], data["button_name"])
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await call.message.answer(f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è <b>{data["button_name"]}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', parse_mode='HTML')
        logging.info(f'User({call.message.chat.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {data["button_name"]}')
    except Exception as e:
        await call.message.answer(f'–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, (–û—à–∏–±–∫–∞ - {e})')
        print(e)


# –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
@dp.callback_query_handler(text='update_schedule_button', state=None)
async def callback_inline_send_schedule(call: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        await bot_delete_messages(call.message, 2)
        await db.update_schedule_data(data['user_id'], data['file_id'], data["button_name"])
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await call.message.answer(f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è <b>{data["button_name"]}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', parse_mode='HTML')
        logging.info(f'User({call.message.chat.id}) –æ–±–Ω–æ–≤–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {data["button_name"]}')
        users = await db.select_users()
        for i in users:
            try:
                await bot.send_message(i, f'–í–Ω–∏–º–∞–Ω–∏–µ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è <b>{data["button_name"]}</b> –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
                                       parse_mode='HTML')
            except Exception as e:
                logging.info(f'–ù–∞–≤–µ—Ä–Ω–æ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω {e}')
        await admin_menu(call.message)

    except Exception as e:
        await call.message.answer(f'–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, (–û—à–∏–±–∫–∞ - {e})')
        logging.info(f'–û—à–∏–±–∫–∞ - {e}')


# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@dp.callback_query_handler(text='delete_schedule_button', state=DeleteSchedule.confirm_delete)
async def callback_inline_send_schedule(call: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        # await bot_delete_messages(call.message, 4)
        await db.delete_schedule_button(data["button_name"])
        # await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è <b>{data["button_name"]}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
                                    parse_mode='HTML')
        await admin_menu(call.message)
        # await call.message.answer(f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è <b>{data["button_name"]}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        #                           parse_mode='HTML')
        await state.reset_state()
        logging.info(f'User({call.message.chat.id}) —É–¥–∞–ª–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {data["button_name"]}')
    except Exception as e:
        await call.message.answer(f'–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–µ–Ω–æ, (–û—à–∏–±–∫–∞ - {e})')
        logging.info(f'–û—à–∏–±–∫–∞ - {e}')


@dp.callback_query_handler(text_contains='cancel_schedule')
async def callback_inline_cancel_schedule(call: CallbackQuery, state: FSMContext):
    logging.info(f'User({call.message.chat.id}) –æ—Ç–º–µ–Ω–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è call.data - {call.data}')
    await bot_delete_messages(call.message, 4)
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await call.message.answer('<b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>', parse_mode='HTML')
    await state.reset_state()


@dp.callback_query_handler(text_contains='cancel_update_schedule')
async def callback_inline_cancel_update_schedule(call: CallbackQuery, state: FSMContext):
    logging.info(f'User({call.message.chat.id}) –æ—Ç–º–µ–Ω–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è call.data - {call.data}')
    await bot_delete_messages(call.message, 2)
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await call.message.answer('<b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ|–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>', parse_mode='HTML')
    await admin_menu(call.message)
    await state.reset_state()


@dp.callback_query_handler(text_contains='cancel_delete_schedule', state=DeleteSchedule.confirm_delete)
async def callback_inline_cancel_delete_schedule(call: CallbackQuery, state: FSMContext):
    logging.info(f'User({call.message.chat.id}) –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è call.data - {call.data}')
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text='<b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–µ–Ω–æ</b>', parse_mode='HTML')
    # await call.message.answer('<b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–µ–Ω–æ</b>', parse_mode='HTML')
    await admin_menu(call.message)
    await state.reset_state()


# –ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞ almaushop.kz –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É –≤ –ë–î
@dp.callback_query_handler(text_contains='update_almaushop_data')
async def callback_inline_update_almaushop_data(call: CallbackQuery):
    logging.info(f'User({call.message.chat.id}) –∑–∞–ø—É—Å—Ç–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã almaushop call.data - {call.data}')
    shop = AlmauShop()
    shop.parse_page(text=shop.load_page())
    try:
        await db.clear_almaushop_table()
        for i in shop.result:
            await db.add_almau_shop_data(call.message.chat.id, i.product_name, i.price, i.currency, i.img, i.url)
        await bot.send_message(call.message.chat.id, '–î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ almau shop –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
    except Exception as err:
        logging.exception(err)
        await bot.send_message(call.message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')


# –ó–∞–ø—Ä–æ—Å –∞–∫–∞–¥–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@dp.callback_query_handler(text='send_academic_calendar', state=None)
async def callback_send_academic_calendar(call: CallbackQuery):
    logging.info(f'User({call.message.chat.id}) –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É {call.data}')
    await call.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è', reply_markup=cancel_academic_calendar())
    await SendAcademCalendar.send_file.set()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∞–¥–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ —Ç–æ —á—Ç–æ –æ–Ω —Ñ–∞–π–ª
@dp.message_handler(content_types=ContentType.ANY, state=SendAcademCalendar.send_file)
async def message_academic_calendar_send_file(message: types.Message, state: FSMContext):
    if message.content_type == 'document':
        await state.update_data(file_id=message.document.file_id, user_id=message.chat.id)
        data = await state.get_data()
        await bot.send_document(message.chat.id, data["file_id"], caption="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç?",
                                reply_markup=cancel_or_send_academic_calendar())
        await state.reset_state(with_data=False)
    else:
        await message.answer('–û—à–∏–±–∫–∞ - –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞')


# –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–∫–∞–¥–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@dp.callback_query_handler(text='send_academic_calendar_to_base', state=None)
async def callback_inline_send_academic_calendar(call: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        # await bot_delete_messages(call.message, 2)
        await db.add_academic_calendar_data(data['user_id'], data['file_id'])
        await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
        # await bot.delete_message(call.message.chat.id, call.message.message_id)
        await call.message.answer('<b>–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', parse_mode='HTML')
        logging.info(f'User({call.message.chat.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –∞–∫–∞–¥–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å')
    except Exception as e:
        await call.message.answer(f'–û—à–∏–±–∫–∞ –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, (–û—à–∏–±–∫–∞ - {e})')
        print(e)


# –û—Ç–º–µ–Ω–∞ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@dp.callback_query_handler(text='cancel_step_academic_calendar', state=['*'])
async def callback_inline_cancel_step_academic_calendar(call: CallbackQuery, state: FSMContext):
    logging.info(f'User({call.message.chat.id}) –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É {call.data}')
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text='<b>–û—Ç–ø—Ä–∞–≤–∫–∞ –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>', parse_mode='HTML')
    await state.reset_state()


# –û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@dp.callback_query_handler(text_contains='cancel_academic_calendar')
async def callback_inline_cancel_acdemic_calendar(call: CallbackQuery, state: FSMContext):
    logging.info(f'User({call.message.chat.id}) –æ—Ç–º–µ–Ω–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è call.data - {call.data}')
    await bot_delete_messages(call.message, 4)
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await call.message.answer('<b>–û—Ç–ø—Ä–∞–≤–∫–∞ –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>', parse_mode='HTML')
    await state.reset_state()
