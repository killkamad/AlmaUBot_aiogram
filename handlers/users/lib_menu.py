import logging
import aiogram.utils.markdown as fmt
from data.config import library_admins
from aiogram.types import CallbackQuery, ContentType
from aiogram import types

from keyboards.default import always_stay_keyboard, keyboard_library, keyboard_library_choice_db, \
    keyboard_library_send_phone
from keyboards.inline import inline_keyboard_menu
from states.library_state import EmailReg
from loader import dp, bot
from keyboards.inline.library_buttons import inline_keyboard_library_registration, inline_keyboard_send_reg_data, \
    inline_keyboard_library_el_res, inline_keyboard_library_base_kaz, inline_keyboard_cancel_lic_db_reg, \
    inline_keyboard_library_base_zarub, inline_keyboard_library_online_bib, inline_keyboard_library_choice_db
# –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –ë–î –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
from utils import db_api as db
from utils.misc import rate_limit
from utils.json_loader import json_data
from aiogram.types import ReplyKeyboardRemove

from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import aiosmtplib

from aiogram.dispatcher import FSMContext
# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
import re

# –ü–∞—Ç–µ—Ä–Ω —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã
valid_email_pattern = re.compile('(^|\s)[-a-z0-9_.]+@([-a-z0-9]+\.)+[a-z]{2,6}(\s|$)')


# –°–æ–∑–¥–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ—á—Ç—ã
def is_valid_email(s):
    return valid_email_pattern.match(s) is not None


@rate_limit(1)
@dp.message_handler(
    lambda message: message.text in ['üåê –í–µ–±—Å–∞–π—Ç', '‚ö° –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã', '‚òé –ö–æ–Ω—Ç–∞–∫—Ç—ã', 'üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã',
                                     'üéì –û–Ω–ª–∞–π–Ω –∫—É—Ä—Å—ã', 'üí≥ –ü–æ—Ç–µ—Ä—è–ª(a) ID-–∫–∞—Ä—Ç—É', '‚ö† –ü—Ä–∞–≤–∏–ª–∞', 'üì∞ –ü—Ä–∞–≤–∞ —á–∏—Ç–∞—Ç–µ–ª—è',
                                     'üö´ –ß—Ç–æ –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è', '‚õî –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è'])
async def library_text_buttons_handler(message: types.Message):
    logging.info(f"User({message.chat.id}) –Ω–∞–∂–∞–ª –Ω–∞ {message.text}")
    # –ö–Ω–æ–ø–∫–∏ –ë–ò–ë–õ–ò–û–¢–ï–ö–ò
    if message.text in ['üåê –í–µ–±—Å–∞–π—Ç', '‚òé –ö–æ–Ω—Ç–∞–∫—Ç—ã', 'üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã',
                        'üéì –û–Ω–ª–∞–π–Ω –∫—É—Ä—Å—ã', 'üí≥ –ü–æ—Ç–µ—Ä—è–ª(a) ID-–∫–∞—Ä—Ç—É', '‚ö† –ü—Ä–∞–≤–∏–ª–∞',
                        'üì∞ –ü—Ä–∞–≤–∞ —á–∏—Ç–∞—Ç–µ–ª—è', 'üö´ –ß—Ç–æ –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è', '‚õî –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è']:
        button_content = await db.select_library_menu_button_content(message.text)
        await bot.send_message(chat_id=message.chat.id, text=button_content)
    elif message.text == '‚ö° –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã':
        await bot.send_message(chat_id=message.chat.id,
                               text='–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã\n',
                               reply_markup=inline_keyboard_library_el_res())


@dp.callback_query_handler(text=['library_registration'])
async def callback_library_registration(call: CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n'
                                     '–¢–∞–∫–∏–µ –∫–∞–∫:\n'
                                     '- IPR Books iprbookshop.ru\n'
                                     '- Scopus scopus.com\n'
                                     '- Web of Science webofknowledge.com\n'
                                     '- –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Æ–†–ê–ô–¢ urait.ru\n'
                                     '- –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ-–ë–∏–±–ª–∏–æ—Ç–µ—á–Ω–∞—è –°–∏—Å—Ç–µ–º–∞ Polpred polpred.com\n'
                                     '- –†–µ—Å–ø—É–±–ª–∏–∫–∞–Ω—Å–∫–∞—è –ú–µ–∂–≤—É–∑–æ–≤—Å–∫–∞—è –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ rmebrk.kz',
                                reply_markup=inline_keyboard_library_registration())


# –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–µ –ë–î
@dp.message_handler(text='/cancel', state=[EmailReg.names, EmailReg.email, EmailReg.phone])
async def callback_cancel_lib_reg(message: types.Message, state: FSMContext):
    logging.info(f'User({message.chat.id}) –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–µ –ë–î')
    await bot.send_message(chat_id=message.chat.id, text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
                           reply_markup=ReplyKeyboardRemove())
    await bot.send_message(chat_id=message.chat.id,
                           text='–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏', reply_markup=keyboard_library())
    await state.reset_state()


# –û—Ç—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.callback_query_handler(text='library_registration_button', state=None)
async def callback_library_registration_button(call: CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ø—É—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É ALMAU.\n'
                                     '–ï—Å–ª–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Å–∞–π—Ç lib.almau.edu.kz/page/9 \n'
                                     '–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',
                                disable_web_page_preview=True,
                                reply_markup=inline_keyboard_library_choice_db())
    # await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n',
    #                           reply_markup=keyboard_library_choice_db())
    # await EmailReg.bookbase.set()


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—Ä–æ—Å –§–ò–û
# @dp.message_handler(
#     lambda message: message.text in ['IPR Books', 'Scopus', 'Web of Science', '–Æ–†–ê–ô–¢', 'Polpred', '–†–ú–≠–ë'],
#     state=EmailReg.bookbase)
@dp.callback_query_handler(text=['IPR Books', 'Scopus', 'Web of Science', '–Æ–†–ê–ô–¢', 'Polpred', '–†–ú–≠–ë'])
async def callback_process_name(call: CallbackQuery, state: FSMContext):
    try:
        await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
    except:
        pass
    async with state.proxy() as data:
        data['book_database'] = call.data
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ '{call.data}'.\n"
                                     f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –§–ò–û",
                                reply_markup=inline_keyboard_cancel_lic_db_reg())
    await EmailReg.names.set()


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û –∏ –∑–∞–ø—Ä–æ—Å Email
@dp.message_handler(state=EmailReg.names)
async def callback_process_email(message: types.Message, state: FSMContext):
    try:
        await bot.edit_message_reply_markup(message.chat.id, message.message_id - 1)
    except:
        pass
    async with state.proxy() as data:
        data['names'] = fmt.quote_html(message.text)
    await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à Email", reply_markup=inline_keyboard_cancel_lic_db_reg())
    await EmailReg.email.set()


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Email –∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(content_types=ContentType.TEXT, state=EmailReg.email)
async def callback_process_phone(message: types.Message, state: FSMContext):
    try:
        await bot.edit_message_reply_markup(message.chat.id, message.message_id - 1)
    except:
        pass
    if "@" in message.text:
        email = message.text.strip()
        if is_valid_email(email):
            async with state.proxy() as data:
                data['email'] = message.text
            await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=keyboard_library_send_phone())
            await EmailReg.phone.set()
        else:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ—á—Ç—É!",
                                reply_markup=inline_keyboard_cancel_lic_db_reg())
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ—á—Ç—É!",
                            reply_markup=inline_keyboard_cancel_lic_db_reg())


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ–∫–∞–∑ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å' –∏–ª–∏ '–æ—Ç–º–µ–Ω–∏—Ç—å'
@dp.message_handler(content_types=ContentType.CONTACT, state=EmailReg.phone)
async def send_license_db_reg_data_to_email(message: types.Message, state: FSMContext):
    if message.chat.id == message.contact.user_id:
        logging.info(f"User({message.chat.id}) –≤–≤–µ–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä")
        await message.reply("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–µ–Ω", reply_markup=ReplyKeyboardRemove())
        phone = message.contact.phone_number
        if phone.startswith("+"):
            phone = phone
        else:
            phone = f"+{phone}"
        async with state.proxy() as data:
            data['phone'] = phone
        message_txt = f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n" \
                      f"–§–ò–û: {data['names']}\n" \
                      f"–í–∞—à email: {data['email']}\n" \
                      f"–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n" \
                      f"–ñ–µ–ª–∞–µ–º–∞—è –±–∞–∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data['book_database']}"
        await bot.send_message(message.chat.id, message_txt, reply_markup=inline_keyboard_send_reg_data())
        await state.reset_state(with_data=False)
    else:
        logging.info(f"User({message.chat.id}) –≤–≤–µ–ª –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä")
        await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä", reply_markup=ReplyKeyboardRemove())
        await message.answer("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–º–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ",
                             reply_markup=keyboard_library_send_phone())


# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
@dp.callback_query_handler(text='SendDataCancel', state=['*'])
async def send_license_db_reg_data_to_email_cancel(call: CallbackQuery, state: FSMContext):
    logging.info(f'User({call.message.chat.id}) –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –ë–î –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ - {call.data}')
    await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)  # –£–±–∏—Ä–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    # –î–æ–±–æ–≤–ª—è–µ—Ç alert –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞
    await bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–º–µ–Ω–µ–Ω")
    await bot.send_message(chat_id=call.message.chat.id,
                           text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –û—Ç–º–µ–Ω–µ–Ω–∞\n'
                                '–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏', reply_markup=keyboard_library())
    await state.reset_state()


# Handler –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≠–õ–ï–ö–¢–†–û–ù–ù–´–ï –†–ï–°–£–†–°–´
@dp.callback_query_handler(text='back_to_library_el_res')
async def callback_el_res(call: CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text='–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã\n',
                                reply_markup=inline_keyboard_library_el_res())


# Handler –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ üìï –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–µ –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö
@dp.callback_query_handler(text='back_to_lic_db_reg', state=['*'])
async def callback_license_db_inline_menu(call: CallbackQuery, state: FSMContext):
    await state.reset_state()
    await callback_library_registration(call)


# Handler –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
@dp.callback_query_handler(text=['library_free_kaz', 'library_free_zarub', 'library_online_librares'])
async def callback_el_res_choice(call: CallbackQuery):
    # logging.info(f'call = {call.data}')
    if call.data == "library_free_kaz":
        text = "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞(–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–µ)"
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=text,
                                    reply_markup=inline_keyboard_library_base_kaz())
    elif call.data == "library_free_zarub":
        text = "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞(–ó–∞—Ä—É–±–µ–∂–Ω—ã–µ)"
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=text,
                                    reply_markup=inline_keyboard_library_base_zarub())
    elif call.data == "library_online_librares":
        text = "–û–Ω–ª–∞–π–Ω –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏"
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=text,
                                    reply_markup=inline_keyboard_library_online_bib())


@dp.callback_query_handler(text='SendEmailToLibrary')
async def send_email_to_library_and_notification(call: CallbackQuery, state: FSMContext):
    logging.info(f"User({call.message.chat.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    data = await state.get_data()
    await db.add_lib_reg_request_data(call.message.chat.id, data['names'], data['phone'], data['email'],
                                      data['book_database'])
    email_message = MIMEMultipart("alternative")
    email_message["From"] = "almaubot@gmail.com"
    email_message["To"] = "killka_m@mail.ru"
    # email_message["To"] = "lib@almau.edu.kz"
    email_message["Subject"] = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–µ –±–∞–∑—ã —Å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞"
    sending_message = MIMEText(
        f"<html>"
        f"<body>"
        f"<h1>"
        f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–µ –±–∞–∑—ã <br/> <br/>"
        f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: <br/>"
        f"–§–ò–û - {data['names']} <br/> "
        f"Email - {data['email']} <br/> "
        f"–¢–µ–ª–µ—Ñ–æ–Ω - {data['phone']}  <br/> "
        f"–ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö - {data['book_database']}"
        f"</h1>"
        f"</body>"
        f"</html>",
        "html", "utf-8"
    )

    email_message.attach(sending_message)
    await aiosmtplib.send(email_message,
                          hostname="smtp.gmail.com",
                          port=587,
                          start_tls=True,
                          # recipients=["killka_m@mail.ru"],
                          username="almaubot@gmail.com",
                          password="mjykwcchpvduwcjy")
    await bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)  # –£–±–∏—Ä–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    await bot.send_message(chat_id=call.message.chat.id,
                           text='–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É',
                           reply_markup=keyboard_library())
    # for admin in library_admins:
    #     try:
    #         await bot.send_message(admin, f"–ü—Ä–∏—à–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n"
    #                                       f"–§–ò–û - {data['names']}\n"
    #                                       f"Email - {data['email']}\n"
    #                                       f"–¢–µ–ª–µ—Ñ–æ–Ω - {data['phone']}\n"
    #                                       f"–ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö - {data['book_database']}")
    #     except Exception as err:
    #         logging.exception(err)
