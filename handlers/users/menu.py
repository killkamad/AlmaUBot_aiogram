import logging
from math import ceil
from loader import dp, bot

from aiogram.types import CallbackQuery, ContentType, ReplyKeyboardRemove, Message
from aiogram import types
from keyboards.default import keyboard_library, keyboard_almaushop, keyboard_feedback, \
    keyboard_send_phone_to_register_in_db, always_stay_menu_keyboard
from keyboards.inline import main_faq_callback, inline_keyboard_menu, inline_keyboard_schedule, \
    inline_keyboard_main_faq, inline_keyboard_main_faq_back, inline_keyboard_certificate, schedule_callback, \
    inline_keyboard_nav_unifi

from data.config import admins
# –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –ë–î –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
from utils import db_api as db

from utils.misc import rate_limit
from states.register_user_phone import RegisterUserPhone

from aiogram.dispatcher import FSMContext
from states.feedback_state import FeedbackMessage

_main_menu_text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n' \
                  '- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n' \
                  '- FAQ - —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö\n' \
                  '- –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ - –ø–æ–∏—Å–∫ –∫–Ω–∏–≥\n' \
                  '- AlmaU Shop - –ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ä—á–∞ AlmaU –∏ –∫–Ω–∏–≥\n' \
                  '- –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ —É—á–µ–±–Ω—ã–π –≥–æ–¥\n' \
                  '- –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å —Ä–µ–∫—Ç–æ—Ä–æ–º - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –∂–∞–ª–æ–±—É –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è —Ä–µ–∫—Ç–æ—Ä—É\n'


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞
@dp.message_handler(commands="set_commands", state="*")
async def cmd_set_commands(message: types.Message):
    logging.info(f"User({message.chat.id}) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É 'set_commands'")
    role = await db.check_role_by_id(message.chat.id)
    if role == 'admin':
        commands = [types.BotCommand(command="/menu", description="–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
                    types.BotCommand(command="/help", description="–ø–æ–º–æ—â—å"),
                    types.BotCommand(command="/admin", description="–∞–¥–º–∏–Ω –º–µ–Ω—é"),
                    types.BotCommand(command="/set_commands", description="—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞")
                    ]
        await bot.set_my_commands(commands)
        await message.answer("–ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
    else:
        await bot.send_message(message.chat.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞')
        logging.info(f'User({message.chat.id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É set_commands')


@rate_limit(3, 'menu_old')
@dp.message_handler(commands=['menu_old'])
async def menu_handler(message):
    logging.info(f"User({message.chat.id}) –≤–æ—à–µ–ª –≤ –º–µ–Ω—é")
    await bot.send_message(message.chat.id, _main_menu_text,
                           reply_markup=inline_keyboard_menu())


@rate_limit(5, 'menu')
@dp.message_handler(commands=['menu'])
async def menu_handler(message):
    logging.info(f"User({message.chat.id}) –≤–æ—à–µ–ª –≤ –º–µ–Ω—é")
    await bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üò',
                           reply_markup=always_stay_menu_keyboard())


################# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü—É Users ###########################
@rate_limit(3, 'phone_reg')
@dp.message_handler(commands=['phone_reg'])
async def register_user_phone(message):
    logging.info(f"User({message.chat.id}) –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=keyboard_send_phone_to_register_in_db())
    await RegisterUserPhone.phone.set()


@dp.message_handler(content_types=ContentType.ANY, state=RegisterUserPhone.phone)
async def register_user_phone_next(message: types.Message, state: FSMContext):
    if message.content_type == 'contact':
        if message.chat.id == message.contact.user_id:
            logging.info(f"User({message.chat.id}) –≤–≤–µ–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä {message.contact.phone_number}")
            await message.reply("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–µ–Ω, –∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
                                reply_markup=always_stay_menu_keyboard())
            phone = message.contact.phone_number
            if phone.startswith("+"):
                phone = phone
            else:
                phone = f"+{phone}"
            await db.register_user_phone(message.chat.id, phone)
            await state.reset_state()
        else:
            logging.info(f"User({message.chat.id}) –≤–≤–µ–ª –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä")
            await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä", reply_markup=ReplyKeyboardRemove())
            await message.answer("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–º–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ",
                                 reply_markup=keyboard_send_phone_to_register_in_db())
    else:
        if message.text == '‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏':
            logging.info(f"User({message.chat.id}) –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            await message.answer('–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n'
                                 '–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=always_stay_menu_keyboard())
            await state.reset_state()
        else:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞, –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã",
                                 reply_markup=keyboard_send_phone_to_register_in_db())


################# –ö–û–ù–ï–¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü—É Users –ö–û–ù–ï–¶ ###########################


@rate_limit(1, '–ú–µ–Ω—é')
@dp.message_handler(lambda message: message.text in ["üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "‚Åâ FAQ", "üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞", "üåÄ AlmaU Shop",
                                                     "üóí –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å", "üè¢ –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É",
                                                     "üìù –°–≤—è–∑—å —Å —Ä–µ–∫—Ç–æ—Ä–æ–º", "üó∫Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—É"])
async def main_menu_handler(message: Message, state: FSMContext):
    logging.info(f"User({message.chat.id}) enter {message.text}")
    if message.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å ‚Üò', reply_markup=await inline_keyboard_schedule())
    elif message.text == "‚Åâ FAQ":
        await state.update_data(page=0)
        data = await state.get_data()
        await message.answer(text=f'F.A.Q –°—Ç—Ä–∞–Ω–∏—Ü–∞ {data["page"] + 1}',
                             reply_markup=await inline_keyboard_main_faq(data["page"]))
    elif message.text == "üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞":
        await message.answer(text='–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ‚Üò', reply_markup=keyboard_library())
    elif message.text == "üåÄ AlmaU Shop":
        await message.answer(text='AlmaU Shop ‚Üò', reply_markup=keyboard_almaushop())
    elif message.text == "üóí –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å":
        file_id = await db.find_id_academic_calendar()
        await bot.send_document(message.chat.id, file_id)
    elif message.text == "üè¢ –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É":
        await message.answer(text='–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ —Å –º–µ—Å—Ç–∞ —É—á–µ–±—ã\n' \
                                  '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ —Å –º–µ—Å—Ç–∞ —É—á–µ–±—ã –ø–æ –º–µ—Å—Ç—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (–≤–æ–µ–Ω–∫–æ–º–∞—Ç –∏ —Ç–¥.) ‚Üò',
                             reply_markup=await inline_keyboard_certificate())
    elif message.text == "üìù –°–≤—è–∑—å —Å —Ä–µ–∫—Ç–æ—Ä–æ–º":
        await message.answer(
            text='–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ —Å –∂–∞–ª–æ–±–∞–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∫—Ç–æ—Ä—É –Ω–∞—à–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. \n'
                 '–î–ª—è —ç—Ç–æ–≥–æ –≤–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç —Å–∞–º–æ–≥–æ –ø–∏—Å—å–º–∞.',
            reply_markup=keyboard_feedback())
    elif message.text == "üó∫Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—É":
        await message.answer(text='–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—É', reply_markup=inline_keyboard_nav_unifi())


@dp.message_handler(lambda message: message.text in ["‚¨Ö –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
async def main_menu_handler(message: Message):
    logging.info(f"User({message.chat.id}) enter {message.text}")
    if message.text == "‚¨Ö –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await message.answer('–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=always_stay_menu_keyboard())


# FAQ –∫–Ω–æ–ø–∫–∏ –≤–ø–µ—Ä–µ–¥ –∏ –Ω–∞–∑–∞–¥
@dp.callback_query_handler(text=["main_faq_previous", "main_faq_next"])
async def main_menu_faq_next_prev(call: CallbackQuery, state: FSMContext):
    logging.info(f"User({call.message.chat.id}) enter {call.data}")
    data = await state.get_data()
    max_pages = (ceil(await db.main_faq_count() / 10))
    if call.data == "main_faq_next" and (data['page'] + 1 < max_pages):
        await state.update_data(page=(data['page'] + 1))
        data = await state.get_data()
        await bot.edit_message_text(chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    text=f'F.A.Q –°—Ç—Ä–∞–Ω–∏—Ü–∞ {data["page"] + 1}',
                                    reply_markup=await inline_keyboard_main_faq(data["page"]))
    elif call.data == "main_faq_previous" and (data['page'] != 0):
        await state.update_data(page=(data['page'] - 1))
        data = await state.get_data()
        await bot.edit_message_text(chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    text=f'F.A.Q –°—Ç—Ä–∞–Ω–∏—Ü–∞ {data["page"] + 1}',
                                    reply_markup=await inline_keyboard_main_faq(data["page"]))
    # await message.answer('–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=always_stay_menu_keyboard())


@dp.callback_query_handler(text='/schedule')
async def callback_inline_schedule(call: CallbackQuery):
    logging.info(f"User({call.message.chat.id}) –≤–æ—à–µ–ª –≤ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å ‚Üò', reply_markup=await inline_keyboard_schedule())
    await call.answer()


@dp.callback_query_handler(text='/faq')
async def callback_inline_faq(call: CallbackQuery):
    logging.info(f"User({call.message.chat.id}) –≤–æ—à–µ–ª –≤ F.A.Q")
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text='F.A.Q ‚Üò', reply_markup=await inline_keyboard_main_faq())
    await call.answer()


@dp.callback_query_handler(text='/library')
async def callback_inline_library(call: CallbackQuery):
    logging.info(f"User({call.message.chat.id}) –≤–æ—à–µ–ª –≤ –ë–∏–±–ª–∏–æ—Ç–µ–∫—É")
    await bot.send_message(chat_id=call.message.chat.id,
                           text='–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ‚Üò', reply_markup=keyboard_library())
    await call.answer()


@dp.callback_query_handler(text='/feedback')
async def callback_inline_feedback(call: CallbackQuery):
    logging.info(f"User({call.message.chat.id}) –≤–æ—à–µ–ª –≤ –û–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —Å —Ä–µ–∫—Ç–æ—Ä–æ–º")
    await bot.send_message(chat_id=call.message.chat.id,
                           text='–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å —Ä–µ–∫—Ç–æ—Ä–æ–º ‚Üò')
    await bot.send_message(chat_id=call.message.chat.id,
                           text='–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ —Å –∂–∞–ª–æ–±–∞–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∫—Ç–æ—Ä—É –Ω–∞—à–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. \n'
                                '–î–ª—è —ç—Ç–æ–≥–æ –≤–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç —Å–∞–º–æ–≥–æ –ø–∏—Å—å–º–∞.',
                           reply_markup=keyboard_feedback())
    await call.answer()


@dp.callback_query_handler(text='/almaushop')
async def callback_inline_almaushop(call: CallbackQuery):
    logging.info(f"User({call.message.chat.id}) –≤–æ—à–µ–ª –≤ AlmaU Shop")
    await bot.send_message(chat_id=call.message.chat.id,
                           text='AlmaU Shop ‚Üò', reply_markup=keyboard_almaushop())
    await call.answer()


@dp.callback_query_handler(text='/certificate')
async def callback_inline_certificate(call: CallbackQuery):
    logging.info(f"User({call.message.chat.id}) –≤–æ—à–µ–ª –≤ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏")
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text='–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ —Å –º–µ—Å—Ç–∞ —É—á–µ–±—ã ‚Üò \n' \
                                     '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ —Å –º–µ—Å—Ç–∞ —É—á–µ–±—ã –ø–æ –º–µ—Å—Ç—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (–≤–æ–µ–Ω–∫–æ–º–∞—Ç –∏ —Ç–¥.)',
                                reply_markup=await inline_keyboard_certificate())
    await call.answer()


@dp.callback_query_handler(text='/academ_calendar')
async def callback_academ_calendar(call: CallbackQuery):
    file_id = await db.find_id_academic_calendar()
    await bot.send_document(call.message.chat.id, file_id)
    await call.answer()


@dp.callback_query_handler(text='go_back')
async def callback_inline(call: CallbackQuery):
    logging.info(f"User({call.message.chat.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –∏ –≤–µ—Ä–Ω—É–ª—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=_main_menu_text,
                                reply_markup=inline_keyboard_menu())
    await call.answer()


######################  –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è ##################################################


@dp.callback_query_handler(schedule_callback.filter())
async def callback_inline(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {call.data}')
    schedule_name = callback_data.get('schedule_name')  # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∏–∑ callback_data
    file_id = await db.find_schedule_id(schedule_name)  # –ü–æ–ª—É—á–µ–Ω–∏–µ file_id –∫–Ω–æ–ø–∫–∏ –∏–∑ –ë–î
    await bot.send_document(call.message.chat.id, file_id)  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await call.answer()


###################### –ö–û–ù–ï–¶ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è –ö–û–ù–ï–¶ #################################################
############################ –ú–µ–Ω—é F.A.Q #########################################################
@dp.callback_query_handler(main_faq_callback.filter())
async def callback_inline_faq_menu(call: CallbackQuery, callback_data: dict):
    id = callback_data.get('callback_id')
    answer = (await db.main_faq_select_question_and_answer(id))['answer']
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=answer, reply_markup=inline_keyboard_main_faq_back())
    await call.answer()


@dp.callback_query_handler(text='back_to_main_faq')
async def callback_inline_faq_menu_back(call: CallbackQuery, state: FSMContext):
    logging.info(f'User({call.message.chat.id}) –≤–µ—Ä–Ω—É–ª—Å—è –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é')
    data = await state.get_data()
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text=f'F.A.Q –°—Ç—Ä–∞–Ω–∏—Ü–∞ {data["page"] + 1}',
                                reply_markup=await inline_keyboard_main_faq(data['page']))
    await call.answer()

############################ –ö–û–ù–ï–¶ –ú–µ–Ω—é F.A.Q –ö–û–ù–ï–¶ #########################################################
